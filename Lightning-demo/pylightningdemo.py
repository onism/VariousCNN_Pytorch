# -*- coding: utf-8 -*-
"""PyLightningDemo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rE2sUVruwNBPQT6o3aRYm_1AO_f60QQX
"""

# !pip install pytorch-lightning

"""LightningModule should contain the following functions:


1.   Model definition (init)
2.   Computations (forward)
3.   training_step
4.   validation_step
5.   optimizer
6.   loader
"""

import os
import torch
from torch import nn
from torch.nn import functional as F
from torch.utils.data import DataLoader
from torchvision.datasets import MNIST 
from torchvision import transforms
import pytorch_lightning as pl

class MNISTModel(pl.LightningModule):
    def __init__(self):
        super(MNISTModel, self).__init__()
        self.l1 = nn.Linear(28*28, 10)
    
    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = self.l1(x)
        x = torch.relu(x)
        return x
    def training_step(self, batch, batch_idx):
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        tensorboard_logs = {'train_loss': loss}
        return {'loss':loss, 'log': tensorboard_logs}

    def validation_step(self, batch, batch_idx):
        # optional, not required
        x, y = batch
        y_hat =self(x)
        loss = F.cross_entropy(y_hat, y)
        return {'val_loss': loss}
    def validation_epoch_end(self, outputs):
      #optional
        avg_loss = torch.stack([x['val_loss'] for x in outputs]).mean()
        tensorboard_logs = {'val_loss':avg_loss}
        return {'val_loss':avg_loss, 'log':tensorboard_logs}
    
    def test_step(self, batch, batch_idx):
      #optional
        x, y = batch
        y_hat = self(x)
        loss = F.cross_entropy(y_hat, y)
        return {'test_loss': loss}
    
    def test_epoch_end(self, outputs):
        #optional
        avg_loss = torch.stack([ x['test_loss'] for x in outputs] ).mean()
        logs = {'test_loss':avg_loss}
        return {'test_loss':avg_loss, 'log':logs, 'progress_bar':logs}
    def configure_optimizers(self):
        # required
        return torch.optim.Adam(self.parameters(), lr=1e-5)
    
    def train_dataloader(self):
        #required
        return DataLoader(MNIST(os.getcwd(), train=True, download=True, transform=transforms.ToTensor()), batch_size=32)
    def val_dataloader(self):
        # OPTIONAL
        return DataLoader(MNIST(os.getcwd(), train=True, download=True, transform=transforms.ToTensor()), batch_size=32)

    def test_dataloader(self):
        # OPTIONAL
        return DataLoader(MNIST(os.getcwd(), train=False, download=True, transform=transforms.ToTensor()), batch_size=32)


    
# required function: init, forward, configure_optimizers, train_dataloader

mnist_model = MNISTModel()
trainer = pl.Trainer()
trainer.fit(mnist_model)

trainer.test()

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard.
# %load_ext tensorboard
# %tensorboard --logdir lightning_logs/